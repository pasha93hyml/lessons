JSON — современный формат хранения и передачи данных.
JSON можно рассматривать как строковое представление JavaScript-объекта. Поддерживает следующие значения: string, number, object, array, boolean, null.

JSON.stringify(obj)
JSON.parse(string)



Cookies
Классический способ хранения информации на клиенте это использовать куки-файл размещенный на компьютере пользователя. Куки это текстовые строки списка пар ключ=значение разделенные точкой с запятой. Обычно куки приходят от сервера и позволяют хранить простые строчные данные.
Но у куки есть несколько ограничений.
Они добавляются к каждому запросу на сервер, что может бы излишне
Куки позволяют хранить всего до 4кб данных, что довольно мало
Поскольку куки используются для отслеживания поведения людей в серфинге, пользователи часто отключают их, а сайты просят каждый раз нужно ли их устанавливать
Используя куки, довольно проблематично отслеживать две или более транзакций на одном и том же сайте, что может происходить одновременно в разных вкладках


Web Storage API
Web Storage API — включает в себя локальное хранилище (localStorage) и хранилище сеансов (sessionStorage), и предоставляет способ хранения пар ключ:значение более интуитивно понятным способом, чем использование куки. Данные в веб-хранилище, в отличие от куки, сохраняются даже при закрытии браузера или выключении компьютера.
Веб-хранилище это часть HTML5-спецификации. Существует два варианта хранения данных:
- sessionStorage — используется для добавления данных в хранилище сеансов, и данные этого хранилища будут доступны для любой страницы с того же сайта, открытого в этом окне, т.е. сессии, и как только окно будет закрыто, сеанс будет завершен, а хранилище сеансов очищено.
- localStorage — хранилище, которое охватывает несколько окон и сохранятеся после текущего сеанса. В частности, веб-приложения могут сохранить пользовательские данные, такие как настройки профиля или содержимое корзины товаров на стороне клиента.

localStorage.setItem(key, value)
localStorage.getItem(key)
ocalStorage.removeItem(key)
localStorage.clear();

http://prgssr.ru/development/obzor-sredstv-hraneniya-dannyh-na-klientskoj-storone.html



Шаблонизация
Шаблонизация (templating) — метод связывания данных и разметки. Удобный способ генерации HTML по шаблону и данным. Используется на клиенте и сервере.
Шаблон — это строка в специальном формате, которая путём подстановки значений и выполнения встроенных фрагментов кода превращается в HTML.
Суть шаблонизации заключается в том, чтобы отделить описание HTML от логики. Разметка помещается в отдельные файлы (шаблоны), а в местах, где необходимо вывести данные, размещаются специальные псевдопеременные. JS-код загружает нужный шаблон и заменяет в нем псевдопеременные на соответствующие данные.


Алгоритм как работать с шаблонизаторами
- Добавить библиотеку
- Создайте template и укажите идентификатор в DOM
- Получить innerHTML из template
- Рендеринг шаблона
  
  
 Шаблонизация с Webpack
- Создать шаблон;
- Создать или получить доступ к объекту с данными;
- шаблон для js
- Handlebars.compile
- Создайте разметку
- Вставить разметку в html 


https://www.sitepoint.com/a-beginners-guide-to-handlebars/
https://medium.com/@qfox/%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-34d55e3b8dfd
https://handlebarsjs.com/



