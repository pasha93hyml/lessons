// Лексическое окружение (lexical environment) — внутренняя,
// закрытая от прямого доступа структура движка для хранения в памяти таблицы
// (Environment Record) идентификаторов переменных и их значений, а так же значение this ,
//  и механизм для извлечения этих значений при обращении по имени,
//  а так же ссылки на родительское лексическое окружение (Parent).

// Каждый раз, когда вызывается функция и создается ее контекст выполнения, создается лексическое окружение привязанное к этому вызову. Если при вызове функции внутри нее объявляется еще одна функция, то в ее скрытое свойство (inernal property или internal slot) [[Environment]] записывается ссылка на это окружение.
// Таким образом каждая функция запоминает лексическое окружение того контекста исполнения в котором она была объявлена. Это позволяет поддерживать цепочку лексических окружений и поэтому работает цепочка областей видимости.
// Лексическое окружение можно представить как словарь - набор пар ключ:значение. Зная ключ можно получить значение. Точно так же, как и при работе с обычным бумажным словарем, где ключ — это слово, а значение — определение слова.
// Все переменные внутри функции, после объявления, записываются в словарь.
// В словаре хранится ссылка на внешнее лексическое окружение, то в котором функция была объявлена.
// Для глобального окружения, ссылки на внешнее окружение нет, там null.
// Так же тут хранится ссылка на контекст исполнения, об этом позже.
// В процессе выполнения функции, значения переменных могут меняться, что сразу же отражается в лексическом окружении. В конце выполнения функции её лексическое окружение уничтожается, а занятая им память высвобождается.
// Поиск значения идентификатора начинается с локального окружения, и если в нём не найден нужный идентификатор, то поиск идет дальше по цепочке окружений, вплоть до глобального.

// В примере ниже, комментариями показано состояние словаря перед выполнением каждой строки кода. Не забывайте, что создание и наполнение словаря происходит при вызове функции, а не при ее определении.

/*
  Global env - создается при исполнении файла скрипта
    Record: {}
    Parent: null
*/

const x = 10;
/*
  Global env
    Record: {x: 10}
    Parent: null
*/

const y = 20;
/*
  Global env
    Record: {x: 10, y: 20}
    Parent: null
*/

/*
  Записывается в момент объявления функции
  [[Environment]] = Global env
*/
const foo = function (z) {
  /*
    Foo env - создается в момент вызова функции
      Record: {z: 30}
      Parent: Global env
  */

  const x = 100;
  /*
    Foo env - создается в момент вызова функции
      Record: {z: 30, x: 100}
      Parent: Global env
  */

  return x + y + z;
};

/*
  Global env
    Record: {x: 10, y: 20, foo: <function>}
    Parent: null
*/

foo(30); // 150
