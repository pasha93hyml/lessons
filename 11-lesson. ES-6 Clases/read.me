ES6
Класс — это удобный способ для задания конструктора вместе с прототипом.

Преимущества использования классов:
- Весь код внутри класса выполняется в строгом режиме.
- Все методы являются неперечислимыми.
- У всех методов класса отсутствует внутренний метод [[Construct]], что означает появление ошибки при попытке использовать эти методы с оператором new.
- Вызов конструктора класса без оператора new вызовет ошибку.


Класс использует аналог функции-конструктора — метод constructor. Это особый метод, он должен присутствовать в объявлении класса обязательно. Назначение конструктора — создавать собственные свойства экземпляра класса.

Функция constructor запускается при вызове new Имякласса(), остальные методы записываются в Имякласса.prototype.
Свойство prototype класса доступно только для чтения, т.е. это свойство нельзя изменить.
В классе должен быть только один конструктор, иначе будет ошибка.


#Методы  класса  доступны всем экземплярам через prototype


#Геттеры и сеттеры
Собственные свойства класса желательно хранить в constructor. Но существует и другой вариант — разместить в теле класса методы set и get. Эти методы используют особый синтаксис, а при их вызове, после имени объекта следует написать только имя геттера или сеттера без вызова функции, т.е. без круглых скобок.


#Статические свойства и методы
Можно создавать собственные свойства класса и собственные методы класса для вызова по имени класса без создания объекта. Такие свойства и методы называют статическими. Для их создания в классе перед свойством или методом нужно добавить служебное слово static.
Конструктор класса тоже метод, но его нельзя делать статическим, это вызовет ошибку.


#Наследование
JavaScript позволяет реализовать наследование классов. Это означает, что мы можем создавать новые классы, которые наследуют все от другого класса, но при этом добавляют уникальную информацию для себя.
Наприсер у нас есть родитель Animal и потомок Dog

При наследовании через extends формируется стандартная цепочка прототипов: методы Dog находятся в Dog.prototype, методы Animal в Animal.prototype и они связаны через __proto__.

Конструктор родителя наследуется автоматически. То есть, если в потомке не указан свой constructor, то используется родительский. 
Если же у потомка свой constructor, то чтобы в нём вызвать конструктор родителя, используется метод super() с аргументами для constructor родителя.

Вызвать конструктор родителя можно только изнутри конструктора потомка. 
В частности, super() нельзя вызвать из произвольного метода.
В конструкторе потомка мы обязаны вызвать super() до первого обращения к ключевому слову this. До вызова super() не существует this, так как по спецификации в этом случае именно super инициализирует this.
super() можно вызывать только в наследующем классе, иначе будет ошибка.
При наследовании, вызов конструктора родителя осуществляется через super(...args), вызов родительских методов через super.method(...args).


#Приватные свойства и методы
Эти свойства и методы иожно высзвать только внутри класса при обращении в нешенем коде будет ошибка.
className.method() - ошибка
className.property - ошибка

Чтбы сделать скойство или метод приватным нужно использовать перед именеи символ #.


#Публичные методы и поля классов
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Classes


